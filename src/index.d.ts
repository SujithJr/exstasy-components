// Generated by dts-bundle-generator v9.5.1

import { App, PropType, SlotsType } from 'vue';

export declare const ExAvatar: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
	radius: {
		type: (NumberConstructor | StringConstructor)[];
		default: (rawProps: {
			tile: boolean;
		}) => "50%" | undefined;
	};
	tile: {
		type: BooleanConstructor;
		default: boolean;
	};
	size: {
		type: (NumberConstructor | StringConstructor)[];
		default: number;
	};
	width: {
		type: (NumberConstructor | StringConstructor)[];
	};
	height: {
		type: (NumberConstructor | StringConstructor)[];
	};
	minWidth: {
		type: (NumberConstructor | StringConstructor)[];
	};
	minHeight: {
		type: (NumberConstructor | StringConstructor)[];
	};
	maxWidth: {
		type: (NumberConstructor | StringConstructor)[];
	};
	maxHeight: {
		type: (NumberConstructor | StringConstructor)[];
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
	radius: {
		type: (NumberConstructor | StringConstructor)[];
		default: (rawProps: {
			tile: boolean;
		}) => "50%" | undefined;
	};
	tile: {
		type: BooleanConstructor;
		default: boolean;
	};
	size: {
		type: (NumberConstructor | StringConstructor)[];
		default: number;
	};
	width: {
		type: (NumberConstructor | StringConstructor)[];
	};
	height: {
		type: (NumberConstructor | StringConstructor)[];
	};
	minWidth: {
		type: (NumberConstructor | StringConstructor)[];
	};
	minHeight: {
		type: (NumberConstructor | StringConstructor)[];
	};
	maxWidth: {
		type: (NumberConstructor | StringConstructor)[];
	};
	maxHeight: {
		type: (NumberConstructor | StringConstructor)[];
	};
}>>, {
	size: string | number;
	as: string;
	radius: string | number;
	tile: boolean;
}, {}>;
export declare const ExCard: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
	tile: {
		type: BooleanConstructor;
		default: boolean;
	};
	size: {
		type: (NumberConstructor | StringConstructor)[];
	};
	radius: {
		type: (NumberConstructor | StringConstructor)[];
	};
	width: {
		type: (NumberConstructor | StringConstructor)[];
	};
	minWidth: {
		type: (NumberConstructor | StringConstructor)[];
	};
	maxWidth: {
		type: (NumberConstructor | StringConstructor)[];
	};
	height: {
		type: (NumberConstructor | StringConstructor)[];
	};
	minHeight: {
		type: (NumberConstructor | StringConstructor)[];
	};
	maxHeight: {
		type: (NumberConstructor | StringConstructor)[];
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
	tile: {
		type: BooleanConstructor;
		default: boolean;
	};
	size: {
		type: (NumberConstructor | StringConstructor)[];
	};
	radius: {
		type: (NumberConstructor | StringConstructor)[];
	};
	width: {
		type: (NumberConstructor | StringConstructor)[];
	};
	minWidth: {
		type: (NumberConstructor | StringConstructor)[];
	};
	maxWidth: {
		type: (NumberConstructor | StringConstructor)[];
	};
	height: {
		type: (NumberConstructor | StringConstructor)[];
	};
	minHeight: {
		type: (NumberConstructor | StringConstructor)[];
	};
	maxHeight: {
		type: (NumberConstructor | StringConstructor)[];
	};
}>>, {
	as: string;
	tile: boolean;
}, {}>;
export interface ExDialogSlotProps {
	default: (props: {
		isOpen: boolean;
		closeDialog: Function;
	}) => any;
}
export declare const ExDialog: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
	modelValue: {
		type: BooleanConstructor;
		default: boolean;
	};
	focusFirst: {
		type: BooleanConstructor;
		default: boolean;
	};
	persistent: {
		type: BooleanConstructor;
		default: boolean;
	};
	transitionDuration: {
		type: (NumberConstructor | StringConstructor)[];
		default: number;
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
	"update:modelValue": (_close: boolean) => true;
	onClose: (_close: boolean) => true;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
	modelValue: {
		type: BooleanConstructor;
		default: boolean;
	};
	focusFirst: {
		type: BooleanConstructor;
		default: boolean;
	};
	persistent: {
		type: BooleanConstructor;
		default: boolean;
	};
	transitionDuration: {
		type: (NumberConstructor | StringConstructor)[];
		default: number;
	};
}>> & {
	onOnClose?: ((_close: boolean) => any) | undefined;
	"onUpdate:modelValue"?: ((_close: boolean) => any) | undefined;
}, {
	as: string;
	modelValue: boolean;
	focusFirst: boolean;
	persistent: boolean;
	transitionDuration: string | number;
}, SlotsType<ExDialogSlotProps>>;
export interface ExDialogCloseSlotProps {
	default: (props: {
		isOpen: boolean;
	}) => any;
}
export declare const ExDialogClose: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
	disabled: {
		type: BooleanConstructor;
		default: boolean;
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
	disabled: {
		type: BooleanConstructor;
		default: boolean;
	};
}>>, {
	as: string;
	disabled: boolean;
}, SlotsType<ExDialogCloseSlotProps>>;
export declare const ExDialogContent: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
}>>, {
	as: string;
}, {}>;
export declare const ExDialogOverlay: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
}>>, {
	as: string;
}, {}>;
export interface ExDrawerSlotProps {
	default: (props: {
		open: Function;
		close: Function;
		isOpen: boolean;
	}) => any;
}
export declare const ExDrawer: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
	modelValue: {
		type: BooleanConstructor;
		default: boolean;
	};
	focusFirst: {
		type: BooleanConstructor;
		default: boolean;
	};
	persistent: {
		type: BooleanConstructor;
		default: boolean;
	};
	allowBodyScroll: {
		type: BooleanConstructor;
		default: boolean;
	};
	transitionDuration: {
		type: (NumberConstructor | StringConstructor)[];
		default: number;
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
	"update:modelValue": (_value: boolean) => true;
	onClose: (_value: boolean) => true;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
	modelValue: {
		type: BooleanConstructor;
		default: boolean;
	};
	focusFirst: {
		type: BooleanConstructor;
		default: boolean;
	};
	persistent: {
		type: BooleanConstructor;
		default: boolean;
	};
	allowBodyScroll: {
		type: BooleanConstructor;
		default: boolean;
	};
	transitionDuration: {
		type: (NumberConstructor | StringConstructor)[];
		default: number;
	};
}>> & {
	onOnClose?: ((_value: boolean) => any) | undefined;
	"onUpdate:modelValue"?: ((_value: boolean) => any) | undefined;
}, {
	as: string;
	modelValue: boolean;
	focusFirst: boolean;
	persistent: boolean;
	transitionDuration: string | number;
	allowBodyScroll: boolean;
}, SlotsType<ExDrawerSlotProps>>;
export interface ExDrawerCloseSlotProps {
	default: (props: {
		isOpen: boolean;
	}) => any;
}
export declare const ExDrawerClose: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
	disabled: {
		type: BooleanConstructor;
		default: boolean;
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
	disabled: {
		type: BooleanConstructor;
		default: boolean;
	};
}>>, {
	as: string;
	disabled: boolean;
}, SlotsType<ExDrawerCloseSlotProps>>;
export declare const ExDrawerContent: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
}>>, {
	as: string;
}, {}>;
export declare const ExDrawerOverlay: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
}>>, {
	as: string;
}, {}>;
export type NudgeTypes = {
	top?: number;
	right?: number;
	bottom?: number;
	left?: number;
};
export interface ExTooltipSlotProps {
	default: (props: {
		isOpen: boolean;
	}) => any;
}
export declare const ExTooltip: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
	disabled: {
		type: BooleanConstructor;
		default: boolean;
	};
	delay: {
		type: (NumberConstructor | StringConstructor)[];
		default: number;
	};
	mode: {
		type: StringConstructor;
		default: string;
	};
	disableTransition: {
		type: BooleanConstructor;
		default: boolean;
	};
	transitionDuration: {
		type: (NumberConstructor | StringConstructor)[];
		default: number;
	};
	nudge: {
		type: PropType<NudgeTypes>;
		default: () => {
			top: number;
			right: number;
			bottom: number;
			left: number;
		};
	};
	top: {
		type: BooleanConstructor;
		default: boolean;
	};
	right: {
		type: BooleanConstructor;
		default: boolean;
	};
	bottom: {
		type: BooleanConstructor;
		default: boolean;
	};
	left: {
		type: BooleanConstructor;
		default: boolean;
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
	disabled: {
		type: BooleanConstructor;
		default: boolean;
	};
	delay: {
		type: (NumberConstructor | StringConstructor)[];
		default: number;
	};
	mode: {
		type: StringConstructor;
		default: string;
	};
	disableTransition: {
		type: BooleanConstructor;
		default: boolean;
	};
	transitionDuration: {
		type: (NumberConstructor | StringConstructor)[];
		default: number;
	};
	nudge: {
		type: PropType<NudgeTypes>;
		default: () => {
			top: number;
			right: number;
			bottom: number;
			left: number;
		};
	};
	top: {
		type: BooleanConstructor;
		default: boolean;
	};
	right: {
		type: BooleanConstructor;
		default: boolean;
	};
	bottom: {
		type: BooleanConstructor;
		default: boolean;
	};
	left: {
		type: BooleanConstructor;
		default: boolean;
	};
}>>, {
	mode: string;
	as: string;
	transitionDuration: string | number;
	top: boolean;
	left: boolean;
	disabled: boolean;
	right: boolean;
	delay: string | number;
	disableTransition: boolean;
	nudge: NudgeTypes;
	bottom: boolean;
}, SlotsType<ExTooltipSlotProps>>;
export interface ExTooltipTriggerSlotProps {
	default: (props: {
		isActive: boolean;
	}) => any;
}
export declare const ExTooltipTrigger: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
}>>, {
	as: string;
}, SlotsType<ExTooltipTriggerSlotProps>>;
export declare const ExTooltipContent: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
}>>, {
	as: string;
}, {}>;
export interface ExDropdownSlotProps {
	default: (props: {
		open(): void;
		close(): void;
		isOpen: boolean;
		labelAttrs: {
			id: string;
			for: string;
		};
	}) => any;
}
export declare const ExDropdown: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
	left: {
		type: BooleanConstructor;
		default: boolean;
	};
	right: {
		type: BooleanConstructor;
		default: boolean;
	};
	mode: {
		type: StringConstructor;
		default: string;
	};
	disabled: {
		type: BooleanConstructor;
		default: boolean;
	};
	focusOnOpen: {
		type: BooleanConstructor;
		default: boolean;
	};
	closeOnClick: {
		type: BooleanConstructor;
		default: boolean;
	};
	closeOnListClick: {
		type: BooleanConstructor;
		default: boolean;
	};
	disableSearch: {
		type: BooleanConstructor;
		default: boolean;
	};
	disableTransition: {
		type: BooleanConstructor;
		default: boolean;
	};
	transitionDuration: {
		type: (NumberConstructor | StringConstructor)[];
		default: number;
	};
	openOnHover: {
		type: BooleanConstructor;
		default: boolean;
	};
	hoverDelay: {
		type: (NumberConstructor | StringConstructor)[];
		default: number;
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
	toggle: (_state: boolean) => true;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
	left: {
		type: BooleanConstructor;
		default: boolean;
	};
	right: {
		type: BooleanConstructor;
		default: boolean;
	};
	mode: {
		type: StringConstructor;
		default: string;
	};
	disabled: {
		type: BooleanConstructor;
		default: boolean;
	};
	focusOnOpen: {
		type: BooleanConstructor;
		default: boolean;
	};
	closeOnClick: {
		type: BooleanConstructor;
		default: boolean;
	};
	closeOnListClick: {
		type: BooleanConstructor;
		default: boolean;
	};
	disableSearch: {
		type: BooleanConstructor;
		default: boolean;
	};
	disableTransition: {
		type: BooleanConstructor;
		default: boolean;
	};
	transitionDuration: {
		type: (NumberConstructor | StringConstructor)[];
		default: number;
	};
	openOnHover: {
		type: BooleanConstructor;
		default: boolean;
	};
	hoverDelay: {
		type: (NumberConstructor | StringConstructor)[];
		default: number;
	};
}>> & {
	onToggle?: ((_state: boolean) => any) | undefined;
}, {
	mode: string;
	as: string;
	transitionDuration: string | number;
	left: boolean;
	disabled: boolean;
	right: boolean;
	disableTransition: boolean;
	focusOnOpen: boolean;
	closeOnClick: boolean;
	closeOnListClick: boolean;
	disableSearch: boolean;
	openOnHover: boolean;
	hoverDelay: string | number;
}, SlotsType<ExDropdownSlotProps>>;
export declare const ExDropdownTrigger: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
}>>, {
	as: string;
}, {}>;
export interface ExDropdownListSlotProps {
	default: (props: {
		isOpen: boolean;
	}) => any;
}
export declare const ExDropdownList: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
	minWidth: {
		type: (NumberConstructor | StringConstructor)[];
	};
	maxWidth: {
		type: (NumberConstructor | StringConstructor)[];
	};
	maxHeight: {
		type: (NumberConstructor | StringConstructor)[];
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
	minWidth: {
		type: (NumberConstructor | StringConstructor)[];
	};
	maxWidth: {
		type: (NumberConstructor | StringConstructor)[];
	};
	maxHeight: {
		type: (NumberConstructor | StringConstructor)[];
	};
}>>, {
	as: string;
}, SlotsType<ExDropdownListSlotProps>>;
export interface ExDropdownListItemSlotProps {
	default: (props: {
		active: boolean;
		disabled: boolean;
	}) => any;
}
export declare const ExDropdownListItem: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
	disabled: {
		type: BooleanConstructor;
		default: boolean;
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
	disabled: {
		type: BooleanConstructor;
		default: boolean;
	};
}>>, {
	as: string;
	disabled: boolean;
}, SlotsType<ExDropdownListItemSlotProps>>;
export interface ExAutocompleteSlotProps {
	default: (props: {
		open(): void;
		close(): void;
		isOpen: boolean;
		labelAttrs: {
			id: string;
			for: string;
		};
	}) => any;
}
export declare const ExAutocomplete: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
	modelValue: {
		type: (ArrayConstructor | ObjectConstructor | StringConstructor)[];
		default: undefined;
	};
	state: {
		type: BooleanConstructor;
		default: boolean;
	};
	multiple: {
		type: BooleanConstructor;
		default: boolean;
	};
	clearable: {
		type: BooleanConstructor;
		default: boolean;
	};
	disabled: {
		type: BooleanConstructor;
		default: boolean;
	};
	closeOnClick: {
		type: BooleanConstructor;
		default: boolean;
	};
	matchKey: {
		type: (StringConstructor | FunctionConstructor)[];
		default: () => <T>(a: T, b: T) => boolean;
	};
	left: {
		type: BooleanConstructor;
		default: boolean;
	};
	right: {
		type: BooleanConstructor;
		default: boolean;
	};
	mode: {
		type: StringConstructor;
		default: string;
	};
	disableTransition: {
		type: BooleanConstructor;
		default: boolean;
	};
	transitionDuration: {
		type: (NumberConstructor | StringConstructor)[];
		default: number;
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
	"update:modelValue": (_value: any) => true;
	"update:state": (_state: boolean) => true;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
	modelValue: {
		type: (ArrayConstructor | ObjectConstructor | StringConstructor)[];
		default: undefined;
	};
	state: {
		type: BooleanConstructor;
		default: boolean;
	};
	multiple: {
		type: BooleanConstructor;
		default: boolean;
	};
	clearable: {
		type: BooleanConstructor;
		default: boolean;
	};
	disabled: {
		type: BooleanConstructor;
		default: boolean;
	};
	closeOnClick: {
		type: BooleanConstructor;
		default: boolean;
	};
	matchKey: {
		type: (StringConstructor | FunctionConstructor)[];
		default: () => <T>(a: T, b: T) => boolean;
	};
	left: {
		type: BooleanConstructor;
		default: boolean;
	};
	right: {
		type: BooleanConstructor;
		default: boolean;
	};
	mode: {
		type: StringConstructor;
		default: string;
	};
	disableTransition: {
		type: BooleanConstructor;
		default: boolean;
	};
	transitionDuration: {
		type: (NumberConstructor | StringConstructor)[];
		default: number;
	};
}>> & {
	"onUpdate:modelValue"?: ((_value: any) => any) | undefined;
	"onUpdate:state"?: ((_state: boolean) => any) | undefined;
}, {
	mode: string;
	as: string;
	modelValue: string | Record<string, any> | unknown[];
	transitionDuration: string | number;
	left: boolean;
	disabled: boolean;
	right: boolean;
	disableTransition: boolean;
	closeOnClick: boolean;
	state: boolean;
	multiple: boolean;
	clearable: boolean;
	matchKey: string | Function;
}, SlotsType<ExAutocompleteSlotProps>>;
export declare const ExAutocompleteInput: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
	modelValue: {
		type: (ArrayConstructor | ObjectConstructor | StringConstructor)[];
		default: undefined;
	};
	displayValue: {
		type: PropType<(item: any) => string>;
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
	"update:modelValue": (_value: any) => true;
	change: (_value: Event & {
		target: HTMLInputElement;
	}) => true;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
	modelValue: {
		type: (ArrayConstructor | ObjectConstructor | StringConstructor)[];
		default: undefined;
	};
	displayValue: {
		type: PropType<(item: any) => string>;
	};
}>> & {
	onChange?: ((_value: Event & {
		target: HTMLInputElement;
	}) => any) | undefined;
	"onUpdate:modelValue"?: ((_value: any) => any) | undefined;
}, {
	as: string;
	modelValue: string | Record<string, any> | unknown[];
}, {}>;
export interface ExAutocompleteListSlotProps {
	default: (props: {
		isOpen: boolean;
	}) => any;
}
export declare const ExAutocompleteList: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
	minWidth: {
		type: (NumberConstructor | StringConstructor)[];
	};
	maxWidth: {
		type: (NumberConstructor | StringConstructor)[];
	};
	maxHeight: {
		type: (NumberConstructor | StringConstructor)[];
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
	minWidth: {
		type: (NumberConstructor | StringConstructor)[];
	};
	maxWidth: {
		type: (NumberConstructor | StringConstructor)[];
	};
	maxHeight: {
		type: (NumberConstructor | StringConstructor)[];
	};
}>>, {
	as: string;
}, SlotsType<ExAutocompleteListSlotProps>>;
export interface ExAutocompleteListItemSlotProps {
	default: (props: {
		active: boolean;
		isSelected: boolean;
		disabled: boolean;
	}) => any;
}
export declare const ExAutocompleteListItem: import("vue").DefineComponent<{
	as: {
		type: StringConstructor;
		default: string;
	};
	value: {
		type: PropType<object | string | number | boolean>;
	};
	disabled: {
		type: BooleanConstructor;
		default: boolean;
	};
}, () => any, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
	as: {
		type: StringConstructor;
		default: string;
	};
	value: {
		type: PropType<object | string | number | boolean>;
	};
	disabled: {
		type: BooleanConstructor;
		default: boolean;
	};
}>>, {
	as: string;
	disabled: boolean;
}, SlotsType<ExAutocompleteListItemSlotProps>>;
declare const _default: {
	install: (app: App) => void;
};

export {
	_default as default,
};

export {};
